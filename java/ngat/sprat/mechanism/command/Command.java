// Command.java
// $HeadURL$
package ngat.sprat.mechanism.command;

import java.io.*;
import java.lang.*;
import java.net.*;
import java.text.*;

import ngat.net.TelnetConnection;
import ngat.net.TelnetConnectionListener;
import ngat.util.logging.*;

/**
 * The Command class is the base class for sending a command and getting a reply from the
 * Sprat mechanism and telemetry Arduino. This is a telnet - type socket interaction.
 * @author Chris Mottram
 * @version $Revision$
 */
public class Command implements Runnable, TelnetConnectionListener
{
	/**
	 * Revision Control System id string, showing the version of the Class.
	 */
	public final static String RCSID = new String("$Id$");
	/**
	 * The base command string to be sent to the Arduino. The value of this string is set in the constructor
	 * of the subclasses implementing a concrete command.
	 */
	public String BASE_COMMAND_STRING = null;
	/**
	 * ngat.net.TelnetConnection instance.
	 */
	protected TelnetConnection telnetConnection = null;
	/**
	 * The command to send to the Sprat mechanism Arduino.
	 */
	protected String commandString = null;
	/**
	 * Exception generated by errors generated in sendCommand, if called via the run method.
	 * @see #sendCommand
	 * @see #run
	 */
	protected Exception runException = null;
	/**
	 * Boolean set to true, when a command has been sent to the server and
	 * a reply string has been received back.
	 * @see #sendCommand
	 */
	protected boolean commandFinished = false;
	/**
	 * A string containing the reply from the Arduino.
	 */
	protected String replyString = null;
	/**
	 * Boolean set to true, when a command has been sent to the Arduino and
	 * an error reply string has been received back.
	 * @see #sendCommand
	 * @see #replyString
	 */
	protected boolean isError = false;
	/**
	 * A string containing the error string returned when a command returned an error.
	 * @see #isError
	 */
	protected String errorString = null;
	/**
	 * The logger to log messages to.
	 */
	protected Logger logger = null;

	/**
	 * Default constructor. Construct the TelnetConnection and set this object to be the listener.
	 * @see #logger
	 * @see #telnetConnection
	 */
	public Command()
	{
		super();
		telnetConnection = new TelnetConnection();
		telnetConnection.setListener(this);
		logger = LogManager.getLogger(this);
	}

	/**
	 * Constructor. Construct the TelnetConnection and set this object to be the listener.
	 * @param address A string representing the address of the Arduino, i.e. "spratmechanism", "192.168.1.77".
	 * @param portNumber An integer representing the port number the Arduino is receiving command on.
	 * @see #logger
	 * @see #telnetConnection
	 * @exception UnknownHostException Thrown if the address in unknown.
	 */
	public Command(String address,int portNumber) throws UnknownHostException
	{
		super();
		logger = LogManager.getLogger(this);
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:Constructor:Setting telnet connection to "+
			   address+":"+portNumber+".");
		telnetConnection = new TelnetConnection(address,portNumber);
		telnetConnection.setListener(this);
	}

	/**
	 * Constructor. Construct the TelnetConnection and set this object to be the listener.
	 * Setup the commandString.
	 * @param address A string representing the address of the Arduino, i.e. "spratmechanism", "192.168.1.77".
	 * @param portNumber An integer representing the port number the Arduino is receiving command on.
	 * @param commandString The string to send to the Arduino as a command.
	 * @see #logger
	 * @see #telnetConnection
	 * @see #commandString
	 * @exception UnknownHostException Thrown if the address in unknown.
	 */
	public Command(String address,int portNumber,String commandString) throws UnknownHostException
	{
		super();
		logger = LogManager.getLogger(this);
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:Constructor:Setting telnet connection to "+
			   address+":"+portNumber+".");
		telnetConnection = new TelnetConnection(address,portNumber);
		telnetConnection.setListener(this);
		this.commandString = commandString;
	}

	/**
	 * Set the address.
	 * @param address A string representing the IP address of the Arduino, i.e. "spratmechanism", "192.168.1.77".
	 * @exception UnknownHostException Thrown if the address in unknown.
	 * @see #telnetConnection
	 * @see ngat.net.TelnetConnection#setAddress
	 */
	public void setAddress(String address) throws UnknownHostException
	{
		telnetConnection.setAddress(address);
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:setAddress:Setting telnet connection address to "+
			   address+".");
	}

	/**
	 * Set the address.
	 * @param address A instance of InetAddress representing the address of the Arduino.
	 * @see #telnetConnection
	 * @see ngat.net.TelnetConnection#setAddress
	 */
	public void setAddress(InetAddress address)
	{
		telnetConnection.setAddress(address);
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:setAddress:Setting telnet connection address to "+
			   address+".");
	}

	/**
	 * Set the port number.
	 * @param portNumber An integer representing the port number the Arduino is receiving command on.
	 * @see #telnetConnection
	 * @see ngat.net.TelnetConnection#setPortNumber
	 */
	public void setPortNumber(int portNumber)
	{
		telnetConnection.setPortNumber(portNumber);
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:setAddress:Setting telnet connection port to "+
			   portNumber+".");
	}

	/**
	 * Set the command.
	 * @param command The string to send to the Arduino as a command.
	 * @see #commandString
	 */
	public void setCommand(String command)
	{
		commandString = command;
	}

	/**
	 * Set the command's arguments. The BASE_COMMAND_STRING is prepended to this to create the command string.
	 * @param argString The command arguments. This can be null, or a blank string, in which case the 
	 *        commandString just consists of the BASE_COMMAND_STRING 
	 *        (to retrieve the mechanism's current position/state).
	 * @see #BASE_COMMAND_STRING
	 * @see #commandString
	 */
	public void setCommandArguments(String argString)
	{
		if((argString == null)||(argString.equals("")))
			commandString = BASE_COMMAND_STRING;
		else
			commandString = new String(BASE_COMMAND_STRING+" "+argString);
	}

	/**
	 * Retrieve the current command.
	 * @return The string to send to the Arduino as a command.
	 * @see #commandString
	 */
	public String getCommand()
	{
		return commandString;
	}

	/**
	 * Run thread. Uses sendCommand to send the specified command over a telnet connection to the specified
	 * address and port number, and receive a reply string. parseReplyString is then called to parse the reply. 
	 * If sendCommand or parseReplyString throws an exception, this is stored in runException and 
	 * commandFinished is set to true.
	 * @see #commandString
	 * @see #sendCommand
	 * @see #parseReplyString
	 * @see #replyString
	 * @see #runException
	 * @see #commandFinished
	 */
	public void run()
	{
		try
		{
			sendCommand();
			parseReplyString();
		}
		catch(Exception e)
		{
			runException = e;
			commandFinished = true;
		}
	}

	/**
	 * Routine to send the specified command over a telnet connection to the specified
	 * address and port number, and wait for a reply from the Arduino.
	 * @exception Exception Thrown if an error occurs.
	 * @see #telnetConnection
	 * @see #commandString
	 * @see #commandFinished
	 * @see #replyString
	 */
	public void sendCommand() throws Exception
	{
		Thread thread = null;

		logger.log(Logging.VERBOSITY_VERY_VERBOSE,"ngat.sprat.mechanism.command.Command:sendCommand:Started.");
		commandFinished = false;
		replyString = null;
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:sendCommand:Opening the Telnet Connection.");
		telnetConnection.open();
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,"ngat.sprat.mechanism.command.Command:sendCommand:"+
			   "Starting a reader thread to deal with the reply.");
		thread = new Thread(telnetConnection,"Reader thread");
		thread.start();
		logger.log(Logging.VERBOSITY_INTERMEDIATE,
			   "ngat.sprat.mechanism.command.Command:sendCommand:Sending Command:"+commandString);
		telnetConnection.sendLine(commandString);
		logger.log(Logging.VERBOSITY_INTERMEDIATE,"ngat.sprat.mechanism.command.Command:sendCommand:"+
			   "Waiting for reader thread to finish (join).");
		thread.join();
		telnetConnection.close();
		commandFinished = true;
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:sendCommand:Finished with reply string '"+
			   replyString+"'.");
	}

	/**
	 * Parse the string returned from the Arduino over the telnet connection (stored in the variable replyString).
	 * This method 
	 * <ul>
	 * <li>We check whether the string starts with 'error', and if so:
	 *     <ul>
	 *     <li>We strip off the 'error' and saves the remainder of the reply in the 'errorString' variable.
	 *     <li>We set 'isError' to true.
	 *     <li>An exception is thrown with the error string and 'commandString' in the error.
	 *     </ul>
	 * <li>Else the 'isError' variable is set to false, and the 'errorString' set to null.
	 * </ul>
	 * Subclasses may override this method to provide custom reply parsing for the command they are implementing.
	 * @exception Exception Thrown if an error occurs.
	 * @see #replyString
	 * @see #isError
	 * @see #errorString
	 * @see #commandString
	 */
	public void parseReplyString() throws Exception
	{
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:parseReplyString:Started.");
		// check whether the reply is an error string
		if(replyString.startsWith("error"))
		{
			logger.log(Logging.VERBOSITY_VERBOSE,
				   "ngat.sprat.mechanism.command.Command:parseReplyString:error reply detected.");
			isError = true;
			errorString = replyString.substring(6);// 6 = strlen("error ")
			logger.log(Logging.VERBOSITY_VERBOSE,
				   "ngat.sprat.mechanism.command.Command:parseReplyString:error reply:"+
				   errorString+".");
			logger.log(Logging.VERBOSITY_VERBOSE,
				   "ngat.sprat.mechanism.command.Command:parseReplyString:Command '"+commandString+
				   "' returned error reply string:"+errorString+":About to throw exception.");
			// throwing an exception here so all errors throw an exception.
			throw new Exception(this.getClass().getName()+
					    ":parseReplyString:Command '"+commandString+
					    "' returned error reply string:"+errorString);
		}
		else
		{
			logger.log(Logging.VERBOSITY_VERBOSE,
				   "ngat.sprat.mechanism.command.Command:parseReplyString:"+
				   "reply was not an explicit error.");
			isError = false;
			errorString = null;
		}
		logger.log(Logging.VERBOSITY_VERY_VERBOSE,
			   "ngat.sprat.mechanism.command.Command:parseReplyString:Finished.");
	}

	/**
	 * TelnetConnectionListener interface implementation.
	 * Called for each line of text read by the TelnetConnection instance.
	 * The string is copied/appended to the replyString.
	 * @param line The string read from the TelnetConnection.
	 * @see #replyString
	 */
	public void lineRead(String line)
	{
		if(replyString == null)
			replyString = line;
		else
			replyString = new String(replyString+line);
	}

	/**
	 * Return the reply string
	 * @return The reply string returned from the server.
	 * @see #replyString
	 */
	public String getReply()
	{
		return replyString;
	}

	/**
	 * Get any exception resulting from running the command.
	 * This is only filled in if the command was sent using the run method, rather than the sendCommand method.
	 * @return An exception if the command failed in some way, or null if no error occured.
	 * @see #run
	 * @see #sendCommand
	 * @see #runException
	 */
	public Exception getRunException()
	{
		return runException;
	}

	/**
	 * Get whether the command has been completed.
	 * @return A Boolean, true if a command has been sent, and a reply received. false if the
	 *     command has not been sent yet, or we are still waiting for a reply.
	 * @see #commandFinished
	 */
	public boolean getCommandFinished()
	{
		return commandFinished;
	}

	/**
	 * Return whether the reply string was parsed as an error string.
	 * @return A boolean, true if an error string was detected, false otherwise.
	 * @see #isError
	 */
	public boolean getIsError()
	{
		return isError;
	}

	/**
	 * Return the error string. This can be null if the command completed successfully.
	 * @return The error string. This can be null if the command completed successfully.#
	 * @see #isError
	 * @see #errorString
	 */
	public String getErrorString()
	{
		return errorString;
	}

	/**
	 * Main test program.
	 * @param args The argument list.
	 * @see #initialiseLogging
	 */
	public static void main(String args[])
	{
		Command command = null;
		int portNumber = 23;

		if(args.length != 3)
		{
			System.out.println("java ngat.sprat.mechanism.command.Command <hostname> <port number> <command>");
			System.exit(1);
		}
		try
		{
			// setup some console logging
			initialiseLogging();
			// parse arguments
			portNumber = Integer.parseInt(args[1]);
			command = new Command(args[0],portNumber,args[2]);
			command.run();
			if(command.getRunException() != null)
			{
				System.err.println("Command: "+args[2]+" failed.");
				command.getRunException().printStackTrace(System.err);
				System.exit(1);
			}
			System.out.println("Reply:"+command.getReply());
			System.out.println("Finished:"+command.getCommandFinished());
			System.out.println("Is Error:"+command.getIsError());
			if(command.getIsError())
				System.out.println("Error String:"+command.getErrorString());
		}
		catch(Exception e)
		{
			e.printStackTrace(System.err);
			System.exit(1);
		}
		System.exit(0);
	}

	/**
	 * A simple class method to setup console logging for testing the ngat.sprat.mechanism.command package 
	 * from the command line.
	 */
	public static void initialiseLogging()
	{
		Logger l = null;
		LogHandler handler = null;
		BogstanLogFormatter blf = null;
		String loggerNameStringArray[] = {"ngat.sprat.mechanism.command.ArcLampCommand",
						  "ngat.sprat.mechanism.command.Command",
						  "ngat.sprat.mechanism.command.DoubleReplyCommand",
						  "ngat.sprat.mechanism.command.GrismCommand",
						  "ngat.sprat.mechanism.command.GyroCommand",
						  "ngat.sprat.mechanism.command.HumidityCommand",
						  "ngat.sprat.mechanism.command.InOutReplyCommand",
						  "ngat.sprat.mechanism.command.MirrorCommand",
						  "ngat.sprat.mechanism.command.OnOffReplyCommand",
						  "ngat.sprat.mechanism.command.RotationCommand",
						  "ngat.sprat.mechanism.command.SlitCommand",
						  "ngat.sprat.mechanism.command.TemperatureCommand",
						  "ngat.sprat.mechanism.command.WLampCommand"};
		blf = new BogstanLogFormatter();
		blf.setDateFormat(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS z"));
		handler = new ConsoleLogHandler(blf);
		handler.setLogLevel(Logging.ALL);
		for(int index = 0; index < loggerNameStringArray.length; index ++)
		{
			l = LogManager.getLogger(loggerNameStringArray[index]);
			l.setLogLevel(Logging.ALL);
			l.addHandler(handler);
		}
	}
}
